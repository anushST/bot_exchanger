Создание клиента обменника
==========================

Данный раздел описывает, как создать клиента для обменника и какие стандарты необходимо соблюдать при его реализации.

.. contents::
   :local:
   :depth: 2

Общая структура проекта
-----------------------

В рамках проекта мы будем соблюдать следующую структуру каталогов (пример для обменника с условным именем ``<exchanger_name>``):

.. code-block:: text

   /api/
   ├── exceptions.py
   ├── <exchanger_name>/
   │   ├── schemas/
   │   │   ├── __init__.py
   │   │   └── <exchanger_name>_request.py
   │   │   └── <exchanger_name>_response.py
   │   └── <exchanger_name>_client.py
   ├── ...
   └── main.py

1. **Клиент** (`<exchanger_name>_client.py`) отвечает за формирование всех необходимых запросов к сервису обменника и предоставление соответствующих методов для работы с ним.
2. **Схемы (Pydantic-модели)** располагаются в папке ``/api/<exchanger_name>/schemas/``. Они описывают входные и выходные данные методов клиента.
3. **Исключения** определяются в файле ``/api/exceptions.py``. Все кастомные исключения должны наследоваться от базового класса `ClientError`, находящегося в корне проекта.

Описание Pydantic-схем
----------------------

Для фиксации структуры запросов и ответов, а также для валидации данных используются Pydantic-модели. Например, в файлах:

- ``/api/ffio/schemas/currencies_list.py``:
  
  .. code-block:: python

    from typing import Optional

    from pydantic import BaseModel, HttpUrl

    class Currency(BaseModel):
        code: str
        coin: str
        network: str
        name: str
        recv: bool
        send: bool
        tag: Optional[str]
        logo: HttpUrl
        color: str
        priority: int


Таким образом, все методы нашего клиента будут принимать запросы в виде объектов (экземпляров) Pydantic-моделей и возвращать ответы, также оформленные как модели Pydantic.

Описание исключений
-------------------

В файле ``/api/exceptions.py`` необходимо описать собственные исключения, унаследованные от класса `ClientError`, который должен находиться в корне проекта:

.. code-block:: python

    from src.exceptions import ClientError


    class InvalidAddressError(ClientError):
        """Raises when address is invalid."""

        pass

Реализация клиента
------------------

Клиент располагается в файле ``/api/<exchanger_name>/<exchanger_name>_client.py``.

Принцип работы клиента
~~~~~~~~~~~~~~~~~~~~~~

1. **Инициализация**:
   - При создании экземпляра клиента необходимо указать базовый URL, по которому доступен сервис обменника и соответствующие `api_keys` для авторизации.

2. **Вызов методов**: Например для создания транзакции вызывается метод `create`, принимающий `CreateTransaction` и возвращающий `Transaction`.

3. **Обработка исключений**: Если сервис обменника вернул код ошибки HTTP, клиент выбрасывает исключение унаследованный от `ClientError`.

Заключение
----------

Таким образом, мы создали клиента для обменника, который:

- Соблюдает структуру проекта и размещение файлов в соответствии с соглашениями.
- Использует Pydantic-модели для валидации входных и выходных данных.
- Обрабатывает возможные исключения, связанные с сетевыми ошибками и логикой работы обменника.
- Предоставляет удобные методы для взаимодействия с сервисом.

Используйте данный шаблон, чтобы легко интегрировать других обменников в ваш проект, сохраняя единообразный подход к структуре кода и обработке ошибок.
