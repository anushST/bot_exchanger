Создаём загрузчик информации о валютах
======================================

Данный раздел описывает, как создать объект «загрузчика» (loader), который будет получать и обновлять данные о валютах и их курсах в Redis. Этот объект будет работать совместно с ранее созданным клиентом.

.. contents::
   :local:
   :depth: 2

Общая идея
----------

После создания клиента необходимо реализовать логику, которая будет:

1. Загружать актуальные данные о валютах.

2. Сохранять полученную информацию в Redis.

3. Периодически обновлять данные через асинхронные задачи.

Место расположения загрузчика
-----------------------------

Файл с реализацией загрузчика должен находиться по пути:

.. code-block:: text

   exchangers/src/loaders/<exchanger_name>_loader.py

Здесь ``<exchanger_name>`` – название конкретного обменника (например, ``myexchanger_loader.py``).

Ключи в Redis
-------------

При работе с Redis нужно использовать следующие ключи и структуры данных:

- **COINS_KEY = 'coins'**  
  Это ключ множества (*set*), куда необходимо добавлять названия (или другие идентификаторы) всех обнаруженных валют.

- **COIN_NETWORKS = '{coin_name}:networks'**  
  Это ключ множества (*set*) для хранения сетей, доступных для каждой монеты. Формат:
  ``BTC:networks``, ``ETH:networks`` и т.д.  
  Использование множества позволит не дублировать данные с разных обменников.

- **FULL_COIN_INFO_KEY = '{exchanger}:{coin_name}:{network}:info'**  
  Ключ для хранения подробной информации о монете ``coin_name`` в сети ``network``, полученной от обменника ``exchanger``.

- **RATE_KEY = '{exchanger}:{type}:{from_coin}:to:{to_coin}:info'**  
  Ключ для хранения данных о курсе (или других сведениях) между монетами ``from_coin`` и ``to_coin``. Параметр ``type`` может указывать на тип операции (например, «fixed»).

Необходимо реализовать методы, которые будут записывать актуальную информацию в вышеперечисленные ключи Redis.

Пример объекта загрузчика
-------------------------------------

Смотрите объект загрузчика ffio ``exchangers/src/loaders/ffio_loader``


Создание асинхронных задач
--------------------------

После написания загрузчика нужно настроить его периодическое выполнение. Предполагается, что для этого у вас есть модуль или пакет, где определены фоновые задачи.

В файле ``exchangers/src/tasks/load_tasks.py`` необходимо доработать метод ``get_tasks()`` таким образом, чтобы он возвращал набор асинхронных задач для всех методов загрузчика. Эти задачи будут выполняться с интервалом в **10 секунд**.

Пример кода (упрощённый):

.. code-block:: python

   import asyncio

    from src.loaders import LoadFFIODataToRedis

    loader = LoadFFIODataToRedis()


    def get_tasks():
        return [
            asyncio.create_task(loader.load_currencies_and_networks()),
            asyncio.create_task(loader.load_fixed_rates()),
            asyncio.create_task(loader.load_float_rates())
        ]

Заключение
----------

Таким образом, созданный загрузчик будет:

1. Получать данные о валютах и курсах (используя ранее созданного клиента).

2. Сохранять их в Redis по строгой схеме ключей.

3. Обновлять информацию каждые 10 секунд через фоновые асинхронные задачи.

Данный подход позволяет централизованно управлять данными о валютах и обеспечивает высокую скорость доступа к ним через Redis. Используйте предложенный шаблон для интеграции и автоматизации загрузки информации из разных обменников. 
