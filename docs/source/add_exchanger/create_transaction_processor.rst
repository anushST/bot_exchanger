Создаём обработчика транзакций
==============================

В данном разделе описывается, как создать обработчик транзакций для нового обменника и встроить его в общую систему.

.. contents::
   :local:
   :depth: 2

Назначение обработчика транзакций
---------------------------------

Обработчик транзакций отвечает за:

1. Создание и отслеживание транзакции.

2. Присвоение корректных статусов по мере изменения состояния транзакции.

3. Взаимодействие с нотификатором, который уведомляет пользователя о каждом шаге.

Место расположения файла
------------------------

Файл с реализацией обработчика должен находиться по пути:

.. code-block:: text

   exchangers/src/transaction/<exchanger_name>_transaction.py

Здесь ``<exchanger_name>`` – это название конкретного обменника (например, ``myexchanger_transaction.py``).

Статусы транзакции
------------------

Обработчик должен выставлять и обновлять следующие статусы, по мере прохождения транзакции:

.. code-block:: python

   NEW = 'new'            # Новая транзакция
   HANDLED = 'handled'    # Транзакция обрабатывается одним из обменников
   CREATED = 'created'    # Транзакция была создана
   PENDING = 'pending'    # Транзакция получена, ожидает подтверждения
   EXCHANGE = 'exchange'  # Транзакция подтверждена, идёт процесс обмена
   WITHDRAW = 'withdraw'  # Отправка средств
   DONE = 'done'          # Транзакция завершена
   EXPIRED = 'expired'    # Транзакция просрочена
   EMERGENCY = 'emergency'# Требуется вмешательство пользователя (экстренная ситуация)
   ERROR = 'error'        # Произошла ошибка

По мере изменения статуса, обработчик будет взаимодействовать с **процессором нотификаций** и **нотификатором**, чтобы пользователь своевременно получал нужные уведомления.

Устройство обработчика
----------------------

Примерная структура класса обработчика транзакций (упрощённый вариант):

.. code-block:: python

    class FFIOTransaction:
        """
        Обработчик транзакций для обменника <exchanger_name>.
        """

        def __init__(self, transaction_id: str):
            """
            :param transaction_id: уникальный идентификатор транзакции, подлежащей обработке
            """
            self.transaction_id = transaction_id

        def process(self):
            """
            Основной метод, в котором мы контролируем весь жизненный цикл транзакции:
            1. Создаём транзакцию на стороне обменника.
            2. Отслеживаем обновления статуса.
            3. Меняем статус локально, пока транзакция не будет завершена или не произойдёт ошибка.
            """
            pass

Взаимодействие с процессором и нотификатором
--------------------------------------------

В **боте** имеется специальный процессор транзакций, расположенный по пути:
``bot/src/transaction/transaction_processor.py``

- Он проверяет каждую транзакцию на наличие поля ``is_status_showed == False``.
- Если этот флаг равен ``False``, процессор создает объект нотификации (описанный в
  ``bot/src/transaction/transaction_notifier.py``) и передаёт транзакцию ему.
- В **нотификаторе** (`transaction_notifier.py`) находятся тексты и логика отправки сообщений пользователю для каждого статуса.  
  Таким образом, чтобы изменить текст оповещения о статусе, нужно внести правки именно в **transaction_notifier.py**.

Регистрация обработчика в диспетчере
------------------------------------

После того как вы написали класс обработчика, необходимо зарегистрировать его в **диспетчере** транзакций, который расположен в:

.. code-block:: text

   exchangers/src/transaction/dispatcher.py

Диспетчер отвечает за выбор наиболее выгодного обменника, а также за:

1. Создание объекта обработчика для выбранного обменника.

2. Вызов у него метода ``process()``.


Принцип работы в системе
------------------------

1. **Создаётся транзакция** (статус: NEW).
2. **Диспетчер** ищет лучший обменник и вызывает его обработчик (статус: HANDLED).
3. **Обработчик** создаёт транзакцию на стороне обменника (статус: CREATED).
4. Далее транзакция проходит через статусы PENDING, EXCHANGE, WITHDRAW вплоть до DONE (или ERROR, EXPIRED, EMERGENCY и т.д. в зависимости от результата).
5. **Процессор транзакций** (`transaction_processor.py`) проверяет статус каждой транзакции:
   - Если у транзакции свойство ``is_status_showed == False``, создаётся нотификатор (`transaction_notifier.py`), который отправляет соответствующие сообщения пользователю.
6. **Изменения текста** оповещений производятся в `transaction_notifier.py`.

Заключение
----------

Таким образом, новый обработчик транзакций для обменника позволяет гибко управлять стадиями выполнения, уведомлять пользователей о каждом шаге и легко интегрироваться с механизмом выбора «лучшего» обменника. 
